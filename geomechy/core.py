# AUTOGENERATED! DO NOT EDIT! File to edit: 00_core.ipynb (unless otherwise specified).

__all__ = ['MaterialSet', 'NodeSet', 'ElementSet', 'ConstitutiveManager']

# Cell
import numpy as np
from .base import ItemDict
from .utils import *
from .io import jsonReader
from .materials import *

# Cell
class MaterialSet(dict):

    def __init__(self, material):

        fluids = material["Fluids"]
        media  = material["PorousMedia"]
        temp   = material["Temp"]

        for idx, f in enumerate(fluids):
            if f["Type"] == "Water":
                w = Water(f)
                self[f"water_{idx+1}"] = w
            elif f["Type"] == "Oil":
                o = Oil(f)
                self[f"oil_{idx+1}"] = o
            elif f["Type"] == "Gas":
                g = Gas(f)
                self[f"gas_{idx+1}"] = g
            elif f["Type"] == "Air":
                a = Air(f)
                self[f"air_{idx+1}"] = a
            else:
                pass

        for idx, m in enumerate(media):
            if m["Type"] == "Soil":
                s = Soil(m)
                self[f"soil_{idx+1}"] = s
            elif m["Type"] == "Rock":
                r = Rock(m)
                self[f"rock_{idx+1}"] = r
            else:
                pass

# Cell
class NodeSet(ItemDict):

    def getNodeCoords(self, nodeIds):
        return np.array(self.get(nodeIds))

    def readFromDict(self, data):
        nodes_dict = data["Nodes"]
        node_dim = nodes_dict["dim"]

        for node in nodes_dict["coords"]:
            self.add(node[0], node[1:])


# Cell
class ElementSet(ItemDict):

    def __init__(self, nodes, props):
        ItemDict.__init__(self)
        self.nodes  = nodes
        self.props  = props
        self.groups = {}

    def __iter__(self):
        elements = []

        for groupName in self.iterGroupNames():
            for element in self.iterElementGroup(groupName):
                elements.append(element)

        return iter(elements)


    def getDofTypes(self):
        dofTypes = []

        for element in self:
            for dofType in element.dofTypes:
                if dofType not in dofTypes:
                    dofTypes.append(dofType)
        return dofTypes


    def readFromFile(self, fileName):
        fin = open(filename)


    def add(self, ID, modelName, elementNodes):

        #Check if the model exists
        if not hasattr(self.props, modelName):
            RuntimeError('Missing properties for model ' + modelName)

        modelProps = getattr(self.props, modelName)


        #Check if the model has a type
        if not hasattr( modelProps, 'type' ):
            RuntimeError('Missing type for model ' + modelName)

        modelType = getattr(modelProps, 'type')


        #Load the element
        exec(f'from geomechy.elements import {modelType} as element',globals())


        #Create the element
        elem = element(elementNodes, modelProps)

        #Check if the node IDs are valid
        for nodeID in elem.getNodes():
            if not nodeID in self.nodes:
                raise RuntimeError('Node ID ' + str(nodeID) + ' does not exist')


        #Add the element to the element set
        ItemDict.add(self, ID, elem)

        #Add the element to the correct group
        self.addToGroup(modelName, ID)


    def addToGroup(self, modelType, ID):

        if not modelType in self.groups:
            self.groups[modelType] = [ID]
        else:
            self.groups[modelType].append( ID )

    def iterGroupNames(self):
        return self.groups

    def iterElementGroup (self, groupName):
        if groupName == "All":
            return iter(self)
        else:
            return iter(self.get(self.groups[groupName]))

# Cell
class ConstitutiveManager(list):

    def __init__(self, matProps):
        matType = matProps.type
        exec(f'from geomechy.materials import {matType} as material', globals())
        self.mat = material(matProps)
        self.iIter = -1

    def reset(self):
        self.iIter = -1

    def getStress(self, kinematic, iSam=-1):

        if iSam == -1:
            self.iIter += 1
            iSam = self.iIter

        self.mat.setIter(iSam)
        return self.mat.getStress(kinematic)

    def commitHistory(self):
        self.mat.commitHistory()