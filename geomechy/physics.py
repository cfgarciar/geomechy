# AUTOGENERATED! DO NOT EDIT! File to edit: 01_physics.ipynb (unless otherwise specified).

__all__ = ['MonoHydroPerm', 'Geomechanic']

# Cell
import numpy as np
from .base import BaseElement
from .core import NodeSet, ElementSet, GroupSet, ShapeFunctionsManager, MaterialSet, ConstitutiveManager, ElementManager

# Cell
class MonoHydroPerm:
    def __init__(self, elements):
        self.elements = elements

    def assembleH(self):
        H = np.zeros((self.elements.numNodes,self.elements.numNodes))
        for e in range(self.elements.numElems):
            He = self.getHeMatrix(self.elements[e+1])
            Le = self.elements[e+1].Le
            H = H + np.matmul(Le.T.todense(),np.matmul(He,Le.todense()))
        return H


    def getHeMatrix(self, elem):
        He = np.zeros(elem.dN[0].shape[1])
        for g, data in enumerate(elem.gp):
            Ng, Bg, Jg, Wg  = self.getShapeData(elem, g)
            k_perm, v_visco = self.getMaterialData(elem)
            He = He + np.matmul(Bg.T,(k_perm/v_visco)*Bg)*Jg*Wg
        return He


    def getShapeData(self, elem, g):
        Wg       = elem.we[g][0]
        Ng       = elem.N[g]
        dNg      = elem.dN[g]
        coords   = elem.coords
        matrixJg = np.matmul(dNg, coords)
        Jg       = np.linalg.det(matrixJg)
        invJg    = np.linalg.inv(matrixJg)
        Bg       = np.matmul(invJg, dNg)
        gCoords  = np.matmul(Ng, coords)

        return Ng, Bg, Jg, Wg


    def getMaterialData(self, elem):
        for _, data in elem.mat.items():
            if data.Type == "Soil" or data.Type == "Rock":
                k_perm  = data.permeability
            elif data.Type == "Water" or data.Type == "Oil":
                v_visco = data.dynamic_viscosity
            elif data.Type == "Gas" or data.Type == "Air":
                v_visco = data.dynamic_viscosity

        return k_perm, v_visco


# Cell
class Geomechanic():
    pass