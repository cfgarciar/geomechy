# AUTOGENERATED! DO NOT EDIT! File to edit: 09_base.ipynb (unless otherwise specified).

__all__ = ['ItemDict', 'Properties', 'BaseElement', 'BaseConstitutive']

# Cell
import pandas as pd
from .utils import *
from .io import jsonReader

# Cell
class ItemDict(dict):

    def add(self, Id, item):
        self[Id] = item

    def get(self, Ids):
        return (self[Ids] if isinstance(Ids,int) else [self[Id] for Id in Ids]
                if isinstance(Ids,list) else "NAN")

    def getId(self, Ids):
        return (list(self.keys())[Ids] if isinstance(Ids,int) else [list(self.keys())[Id] for Id in Ids]
                if isinstance(Ids,list) else "NaN" )

# Cell
class Properties:

    def __init__ (self, props={}):

        for key in props.keys():
            setattr(self, key, props[key])

    def __str__ (self):
        att_prop  = ''

        for att in dir(self):
            if att.startswith('__') or att.startswith('store'):
                continue

            att_prop += 'Attribute: ' + att + '\n'
            att_prop += str(getattr(self,att)) + '\n'

        return att_prop

    def __iter__ ( self ):
        propsList = []

        for att in dir(self):
            if att.startswith('__') or att.startswith('store'):
                continue
            propsList.append((att, getattr(self,att)))

        return iter(propsList)

    def store (self, key, val):
        setattr(self, key, val)

# Cell
class BaseElement(list):

    dofTypes = []

    def __init__ (self, nodes, props):
        list.__init__(self, nodes)
        self.history = {}
        self.current = {}

        for name,val in props:
            if name is "material":
                self.matProps = val
                self.mat = MaterialManager(self.matProps)
            else:
                setattr(self, name, val)

    def dofCount(self):
        return len(self)*len(self.dofTypes)

    def getNodes(self):
        return self

    def getType (self):
        return self.elemType

    def setHistoryParameter(self, name, val):
        self.current[name] = val

    def getHistoryParameter(self, name):
        return self.history[name]

    def commitHistory(self):
        self.history = self.current.copy()
        self.current = {}

        if hasattr(self, "mat"):
            self.mat.commitHistory()

# Cell
class BaseConstitutive:

    def __init__(self, props):
        for name,val in props.items():
            dim = eval(val["dim"])
            value = val["value"]
            setattr(self, name, value*dim)

        self.history = pd.DataFrame({"i":[0], "d_epsilon":[0]})
        self.current = {"i":0, "d_epsilon":0}
        self.iIter   = -1

    def setIter(self, iIter):
        self.iIter = iIter

    def setHistoryParameter(self, name, val):
        if self.iIter == -1:
            self.history[name]=val
            self.current[name]=val
            return

    def getHistoryParameter(self, name, k):
        return self.history.loc[k,name]

    def setCurrentParameter(self, name, val):
        self.current[name]=val

    def getCurrentParameter(self, name):
        return self.current[name]

    def commitHistory(self):
        self.setIter(0)
        self.history = self.history.append(self.current, ignore_index=True)
        for key, val in self.current.items():
            self.current[key] = 0.
